<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <groupId>com.jag.asystem</groupId>
    <artifactId>asystem-anode</artifactId>
    <packaging>pom</packaging>
    <version>10.000.0142-SNAPSHOT</version>

    <parent>
        <groupId>com.jag</groupId>
        <artifactId>asystem</artifactId>
        <version>10.000.0142-SNAPSHOT</version>
    </parent>

    <properties>
        <tar.build.skip>true</tar.build.skip>
        <conda.build.skip>${maven.test.skip}</conda.build.skip>
        <python.home>${project.build.directory}/test-python/python</python.home>
        <python.runtime>${python.home}/bin/python</python.runtime>
        <dir.source.python>${project.basedir}/src/main/python</dir.source.python>
        <dir.output.python>${project.build.directory}/python</dir.output.python>
        <dir.runtime.anode>${project.build.directory}/anode-runtime</dir.runtime.anode>
        <dir.runtime-clean.anode>${project.build.directory}/anode-runtime-clean</dir.runtime-clean.anode>
        <system.test.anode.opts>-c${dir.source.python}/config/anode.yaml -d${dir.runtime-clean.anode}/config -v</system.test.anode.opts>
        <system.test.anode.log>${project.build.directory}/anode-runtime/anode.log</system.test.anode.log>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.jag.asystem</groupId>
            <artifactId>asystem-amodel</artifactId>
            <version>${project.version}</version>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-application-resources</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${dir.source.python}/anode</outputDirectory>
                            <overwrite>true</overwrite>
                            <resources>
                                <resource>
                                    <directory>${project.build.directory}/classes</directory>
                                    <includes>
                                        <include>application.properties</include>
                                    </includes>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-model-python</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${dir.source.python}/anode/avro</outputDirectory>
                            <overwrite>true</overwrite>
                            <resources>
                                <resource>
                                    <directory>../asystem-amodel/src/main/resources/avro</directory>
                                    <includes>
                                        <include>model.properties</include>
                                    </includes>
                                    <filtering>true</filtering>
                                </resource>
                                <resource>
                                    <directory>../asystem-amodel/src/main/resources/avro/${asystem-model.version}</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-model-web</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${dir.source.python}/anode/web/js/metadata</outputDirectory>
                            <overwrite>true</overwrite>
                            <resources>
                                <resource>
                                    <directory>../asystem-amodel/src/main/resources/avro/${asystem-model.version}</directory>
                                    <includes>
                                        <include>datum.avsc</include>
                                    </includes>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-resources</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${dir.output.python}</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${dir.source.python}</directory>
                                    <excludes>
                                        <exclude>**/*.pyc</exclude>
                                        <exclude>**/*.egg</exclude>
                                        <exclude>anode/test/config/*</exclude>
                                        <exclude>anode/test/pickle/*</exclude>
                                        <exclude>anode/test/template/*</exclude>
                                    </excludes>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-resources-test-data</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${dir.output.python}</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${dir.source.python}</directory>
                                    <includes>
                                        <include>anode/test/config/*</include>
                                        <include>anode/test/pickle/*</include>
                                        <include>anode/test/template/*</include>
                                    </includes>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-resources-test-pickle</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${dir.output.python}/config/amodel</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${dir.source.python}/anode/test/pickle</directory>
                                    <includes>
                                        <include>**/*.pkl</include>
                                    </includes>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.tunyk.mvn.plugins.htmlcompressor</groupId>
                <artifactId>htmlcompressor-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>process-classes</phase>
                        <goals>
                            <goal>html</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <encoding>UTF-8</encoding>
                    <srcFolder>${project.basedir}/src/main/python/anode/web</srcFolder>
                    <targetFolder>${dir.output.python}/anode/web</targetFolder>
                    <compressJavaScript>true</compressJavaScript>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.samaxes.maven</groupId>
                <artifactId>minify-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>process-classes</phase>
                        <goals>
                            <goal>minify</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <charset>UTF-8</charset>
                    <skipMerge>true</skipMerge>
                    <jsEngine>CLOSURE</jsEngine>
                    <nosuffix>true</nosuffix>
                    <webappSourceDir>${project.basedir}/src/main/python/anode/web</webappSourceDir>
                    <webappTargetDir>${dir.output.python}/anode/web</webappTargetDir>
                    <cssSourceIncludes>
                        <cssSourceInclude>**/*.css</cssSourceInclude>
                    </cssSourceIncludes>
                    <cssSourceExcludes>
                        <cssSourceExclude>**/*.min.css</cssSourceExclude>
                    </cssSourceExcludes>
                    <jsSourceIncludes>
                        <jsSourceInclude>**/*.js</jsSourceInclude>
                    </jsSourceIncludes>
                    <jsSourceExcludes>
                        <jsSourceExclude>**/*.min.js</jsSourceExclude>
                    </jsSourceExcludes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.github.klieber</groupId>
                <artifactId>phantomjs-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>install</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <version>2.1.1</version>
                    <skip>${maven.system-test.skip}</skip>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.github.searls</groupId>
                <artifactId>jasmine-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <phase>integration-test</phase>
                    </execution>
                </executions>
                <configuration>
                    <skipJasmineTests>${maven.system-test.skip}</skipJasmineTests>
                    <webDriverClassName>org.openqa.selenium.phantomjs.PhantomJSDriver</webDriverClassName>
                    <webDriverCapabilities>
                        <capability>
                            <name>phantomjs.cli.args</name>
                            <list>
                                <value>--web-security=false</value>
                                <value>--webdriver-logfile=none</value>
                                <value>--webdriver-loglevel=ERROR</value>
                            </list>
                        </capability>
                    </webDriverCapabilities>
                    <jsSrcDir>${project.basedir}/src/main/python/anode/web/js</jsSrcDir>
                    <jsTestSrcDir>${project.basedir}/src/main/python/anode/test/js</jsTestSrcDir>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>python-clean</id>
                        <phase>clean</phase>
                        <configuration>
                            <target unless="${maven.system-test.skip}">
                                <exec executable="python" dir="${java.io.tmpdir}" failonerror="true">
                                    <arg value="${dir.source.python}/setup.py" />
                                    <arg value="clean" />
                                </exec>
                                <exec executable="/bin/sh" failonerror="true" failifexecutionfails="true">
                                    <arg value="-c" />
                                    <arg value="ANODE_PATH='${python.home}/bin/anode' ANODE_OPTS='${system.test.anode.opts}' ANODE_LOG_FILE='${system.test.anode.log}' ${dir.source.python}/script/anode stop" />
                                </exec>
                                <delete file="${project.basedir}/phantomjsdriver.log" />
                                <delete file="${project.basedir}/../phantomjsdriver.log" />
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>python-test</id>
                        <phase>test</phase>
                        <configuration>
                            <target unless="${maven.test.skip}">
                                <exec executable="${python.runtime}" dir="${dir.output.python}" failonerror="true">
                                    <arg value="setup.py" />
                                    <arg value="trial" />
                                    <arg value="--reporter=text" />
                                    <env key="INTEGRATION_TEST_SKIP" value="${maven.system-test.skip}" />
                                </exec>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>python-system-test-pre</id>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <target unless="${maven.system-test.skip}">
                                <exec executable="${python.runtime}" dir="${dir.output.python}" failonerror="true">
                                    <arg value="setup.py" />
                                    <arg value="install" />
                                </exec>
                                <delete dir="${dir.runtime.anode}" />
                                <mkdir dir="${dir.runtime.anode}" />
                                <copy todir="${dir.runtime.anode}/config/anode">
                                    <fileset dir="${dir.source.python}/anode/test/pickle" includes="**/*.pkl" />
                                </copy>
                                <delete dir="${dir.runtime-clean.anode}" />
                                <mkdir dir="${dir.runtime-clean.anode}/config" />
                                <echo>

                                </echo>
                                <exec executable="/bin/sh" failonerror="true" failifexecutionfails="true">
                                    <arg value="-c" />
                                    <arg value="ANODE_PATH='${python.home}/bin/anode' ANODE_OPTS='${system.test.anode.opts}' ANODE_LOG_FILE='${system.test.anode.log}' ${dir.source.python}/script/anode start" />
                                </exec>
                                <echo>

                                </echo>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>python-system-test-post</id>
                        <phase>post-integration-test</phase>
                        <configuration>
                            <target unless="${maven.system-test.skip}">
                                <echo>

                                </echo>
                                <exec executable="/bin/sh" failonerror="true" failifexecutionfails="true">
                                    <arg value="-c" />
                                    <arg value="ANODE_PATH='${python.home}/bin/anode' ANODE_OPTS='${system.test.anode.opts}' ANODE_LOG_FILE='${system.test.anode.log}' ${dir.source.python}/script/anode stop" />
                                </exec>
                                <echo>

                                </echo>
                                <delete file="${project.basedir}/phantomjsdriver.log" />
                                <delete file="${project.basedir}/../phantomjsdriver.log" />
                                <exec executable="${python.runtime}" dir="${dir.source.python}" failonerror="true">
                                    <arg value="setup.py" />
                                    <arg value="clean" />
                                </exec>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>python-run</id>
                        <configuration>
                            <target>
                                <exec executable="${python.runtime}" dir="${dir.output.python}" failonerror="true">
                                    <arg value="setup.py" />
                                    <arg value="install" />
                                </exec>
                                <delete dir="${dir.runtime.anode}" />
                                <mkdir dir="${dir.runtime.anode}" />
                                <copy todir="${dir.runtime.anode}/config/anode">
                                    <fileset dir="${dir.source.python}/anode/test/pickle" includes="**/*.pkl" />
                                </copy>
                                <delete dir="${dir.runtime-clean.anode}" />
                                <mkdir dir="${dir.runtime-clean.anode}/config" />
                                <echo>Starting anode ...</echo>
                                <exec executable="${python.home}/bin/anode" failonerror="true" failifexecutionfails="true">
                                    <arg value="-c${dir.output.python}/config/anode.yaml" />
                                    <arg value="-d${dir.runtime.anode}/config" />
                                </exec>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>python-deploy</id>
                        <phase>deploy</phase>
                        <configuration>
                            <target unless="${maven.install-python.skip}">
                                <exec executable="/usr/bin/sudo" dir="${dir.output.python}" failonerror="true">
                                    <arg value="python" />
                                    <arg value="setup.py" />
                                    <arg value="install" />
                                </exec>
                                <exec executable="/usr/bin/sudo" dir="${dir.output.python}" failonerror="true">
                                    <arg value="/bin/mkdir" />
                                    <arg value="-p" />
                                    <arg value="/etc/anode" />
                                </exec>
                                <exec executable="/usr/bin/sudo" dir="${dir.output.python}" failonerror="true">
                                    <arg value="/bin/cp" />
                                    <arg value="-rvf" />
                                    <arg value="${dir.output.python}/config/anode.yaml" />
                                    <arg value="/etc/anode" />
                                </exec>
                                <exec executable="/usr/bin/sudo" dir="${dir.output.python}" failonerror="true">
                                    <arg value="/bin/cp" />
                                    <arg value="-vrf" />
                                    <arg value="${dir.output.python}/script/anode" />
                                    <arg value="/etc/init.d" />
                                </exec>
                                <exec executable="/usr/bin/sudo" dir="${dir.output.python}" failonerror="true">
                                    <arg value="/bin/chmod" />
                                    <arg value="+x" />
                                    <arg value="/etc/init.d/anode" />
                                </exec>
                                <exec executable="/usr/bin/sudo" dir="${dir.output.python}" failonerror="true">
                                    <arg value="/bin/systemctl" />
                                    <arg value="daemon-reload" />
                                </exec>
                                <exec executable="/usr/bin/sudo" dir="${dir.output.python}" failonerror="true">
                                    <arg value="/bin/systemctl" />
                                    <arg value="enable" />
                                    <arg value="anode" />
                                </exec>
                                <exec executable="/usr/bin/sudo" dir="${dir.output.python}" failonerror="true">
                                    <arg value="python" />
                                    <arg value="setup.py" />
                                    <arg value="clean" />
                                </exec>
                                <exec executable="/usr/bin/sudo" dir="${dir.output.python}" failonerror="true">
                                    <arg value="/usr/sbin/service" />
                                    <arg value="anode" />
                                    <arg value="stop" />
                                </exec>
                                <exec executable="/usr/bin/sudo" dir="${dir.output.python}" failonerror="true">
                                    <arg value="/usr/sbin/service" />
                                    <arg value="anode" />
                                    <arg value="start" />
                                </exec>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
